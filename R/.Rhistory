knitr::opts_chunk$set(echo = TRUE)
RMSE_M2
knitr::opts_chunk$set(echo = TRUE)
lpd_m1
knitr::opts_chunk$set(echo = TRUE)
lpd_m2
library(glue)
print(glue("
LPD of model 1 and model 2 is {lpd_m1} and {lpd_m2}.
Same order, RMSE is {RMSE_M1} and {RMSE_m2}
"))
print(glue("
LPD of model 1 and model 2 is {lpd_m1} and {lpd_m2}.
Same order, RMSE is {RMSE_M1} and {RMSE_M2}
"))
print(glue("
LPD of model 1 and model 2 is {round(lpd_m1,2)} and {round(lpd_m2,2)}.
Same order, RMSE is {round(RMSE_M1,3)} and {round(RMSE_M2,3)}
"))
set.seed(123)
par(mfrow=c(4,5))
for (i in 1:20) {
ind=floor( length(a_dot)*runif(1))
mu = a_dot[i]+b_dot[i]*x.month
y_tilde = rnorm(length(x.month), mu, sqrt(sigma2_dot[ind]))
hist(y_tilde,breaks=20)
}
par(mfrow=c(4,5))
for (i in 1:20) {
ind=floor( length(a_dot)*runif(1))
mu = a_dot[i]+b_dot[i]*x.month
y_tilde = rnorm(length(x.month), mu, sqrt(sigma2_dot[ind]))
hist(y_tilde,breaks=20)
par(mfrow=c(4,5))
for (i in 1:20) {
ind=floor( length(a_dot)*runif(1))
mu = a_dot[i]+b_dot[i]*x.month
y_tilde = rnorm(length(x.month), mu, sqrt(sigma2_dot[ind]))
hist(y_tilde,breaks=20)
par(mfrow=c(4,5))
for (i in 1:20) {
ind=floor( length(a_dot)*runif(1))
mu = a_dot[i]+b_dot[i]*x.month
y_tilde = rnorm(length(x.month), mu, sqrt(sigma2_dot[ind]))
hist(y_tilde,breaks=20)
par(mfrow=c(4,5))
for (i in 1:20) {
ind=floor( length(a_dot)*runif(1))
mu = a_dot[i]+b_dot[i]*x.month
y_tilde = rnorm(length(x.month), mu, sqrt(sigma2_dot[ind]))
hist(y_tilde,breaks=20)
}
par(mfrow=c(4,5))
for (i in 1:20) {
ind=floor( length(a_dot)*runif(1))
mu = a_dot2[i]+b_dot2[i]*x.month+c_dot2[i]*x.month^2
y_tilde = rnorm(length(x.month), mu, sqrt(sigma2_dot2[ind]))
hist(y_tilde,breaks=20)
}
print(post_training_M2)
print(post_training_M1)
hist(y.month,breaks=20)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(StanHeaders)
library(rstan)
library(glue)
library(tidyverse)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
set.seed(123)
# extract the samples into matrix
post_sample <- as.matrix(post, pars =c("a","b","sigma2"))    # combine all chains into one matrix in R workspace
a_dot=post_sample[,1]
b_dot=post_sample[,2]
sigma2_dot=post_sample[,3]
x.pred= (seq(1,70*12,length=70*12)-mx)/stdx
mu = matrix(NA,length(x.pred),length(b_dot))
y.tilde = matrix(NA,length(x.pred),length(b_dot))
mean_mu=rep(NA, length(x.pred))
int_mu = matrix(NA,length(x.pred),2)
mean_y=rep(NA, length(x.pred))
int_y = matrix(NA,length(x.pred),2)
for (i in 1:length(x.pred)) {
#mu[i,] = (a + b*x.pred[i])*stdy + my
mu[i,] = a_dot + b_dot*x.pred[i]
mean_mu[i]=mean(mu[i,])
int_mu[i,] = quantile(mu[i,],probs=c(0.025,0.975))
#y_i = mu_i + e_i and e_i ~ N(0,sigma2)
y.tilde[i,] =  mu[i,] + rnorm(length(mu[i,]), 0, sqrt(sigma2_dot))
mean_y[i]=mean(y.tilde[i,])
int_y[i,] = quantile(y.tilde[i,],probs=c(0.025,0.975))
}
plot(x.pred,mean_mu, type="l",col="blue") #posterior mean for mu(x)
lines(x.pred,int_mu[,1],col="green")
lines(x.pred,int_mu[,2],col="green") # 95% interval of mu(x)
lines(x.pred,mean_y, type="l",col="magenta") #posterior mean for y.tilde
lines(x.pred,int_y[,1],col="red")
lines(x.pred,int_y[,2],col="red") # 95% interval of y.tilde
lines(x.month,y.month)
points(x.month,y.month, cex=0.2)
par(mar)
par("mar")
par(mar=c(1,1,1,1))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(4,5))
for (i in 1:20) {
ind=floor( length(a_dot)*runif(1))
mu = a_dot[i]+b_dot[i]*x.month
y_tilde = rnorm(length(x.month), mu, sqrt(sigma2_dot[ind]))
hist(y_tilde,breaks=20)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(StanHeaders)
library(rstan)
set.seed(123)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
maunaloa.dat = read.table("maunaloa_data.txt", header=FALSE, sep="\t")
# Let's take the yearly averages and plot them
x.year = as.vector(t(maunaloa.dat[,1]))
y.year = as.vector(t(maunaloa.dat[,14]))
# remove NA rows
x.year = x.year[y.year>0]
y.year = y.year[y.year>0]
plot(x.year,y.year)
# Let's take the monthy values and construct a "running month" vector
y.month.orig = as.vector(t(maunaloa.dat[,2:13]))
x.month.orig = as.vector(seq(1,length(y.month.orig),1))
# remove NA rows
x.month.orig = x.month.orig[y.month.orig>0]
y.month.orig = y.month.orig[y.month.orig>0]
plot(x.month.orig,y.month.orig)
# standardize y and x
my = mean(y.month.orig)
stdy = sd(y.month.orig)
y.month = (y.month.orig-my)/stdy
mx = mean(x.month.orig)
stdx = sd(x.month.orig)
x.month = (x.month.orig-mx)/stdx
# data list
data <- list (N=length(x.month), y=y.month, x=x.month)
mauna_loa_c02_model = "
data{
int<lower=0> N; // number of observations
real y[N];     // observed CO2 values
real x[N];    // observed times
}
parameters{
real a;
real b;
real<lower=0> sigma2;
}
transformed parameters{
real<lower=0> sigma;
sigma=sqrt(sigma2);
}
model{
a ~ normal( 0, sqrt(1e6));
b ~ normal( 0, sqrt(1e6));
sigma2 ~ inv_gamma(0.001,0.001);
for (i in 1:N)
y[i] ~ normal(a + b*x[i], sigma);
}"
set.seed(123)
post=stan(model_code=mauna_loa_c02_model,data=data,warmup=500,iter=2000,chains=4,thin=1,control = list(adapt_delta = 0.8,max_treedepth = 10))
set.seed(123)
# extract the samples into matrix
post_sample <- as.matrix(post, pars =c("a","b","sigma2"))    # combine all chains into one matrix in R workspace
a_dot=post_sample[,1]
b_dot=post_sample[,2]
sigma2_dot=post_sample[,3]
x.pred= (seq(1,70*12,length=70*12)-mx)/stdx
mu = matrix(NA,length(x.pred),length(b_dot))
y.tilde = matrix(NA,length(x.pred),length(b_dot))
mean_mu=rep(NA, length(x.pred))
int_mu = matrix(NA,length(x.pred),2)
mean_y=rep(NA, length(x.pred))
int_y = matrix(NA,length(x.pred),2)
for (i in 1:length(x.pred)) {
#mu[i,] = (a + b*x.pred[i])*stdy + my
mu[i,] = a_dot + b_dot*x.pred[i]
install.packages("tidyverse")
install.packages("xfun")
install.packages("xfun")
exp(-0.13)
exp(0.006)
exp(0.004)
exp(-0.006)
40*(31.82+4.74+7.15+7.15+)
40*(31.82+4.74+7.15+7.15)
40*(31.82+4.74+7.15+7.15)*4
40*(31.82+4.74+7.15+7.15+2.63)*4
40*(31.82+4.74+7.15+7.15+2.63)*4
40*(31.82+4.74+7.15+7.15+2.63)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(StanHeaders)
library(rstan)
library(glue)
library(tidyverse)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
stanModel_whitefish <-"
data{
int n;
int y[n];
matrix[n,3] x;
}
parameters{
real alpha;
real beta1;
real beta2;
real beta3;
}
model{
alpha ~ normal(0,10);
beta1 ~ normal(0,10);
beta2 ~ normal(0,10);
beta3 ~ normal(0,10);
for (i in 1:n)
y[i] ~ bernoulli_logit(alpha + x[i,1]*beta1 + x[i,2]*beta2 + x[i,3]*beta3);
}"
data_raw <-
read.csv("white_fishes_data.csv")  %>%
mutate(
DIS_SAND_sc = scale(DIS_SAND),
ICELAST09_sc = scale(ICELAST09)
)
data_stan <- list(
n = nrow(data_raw),
x = data_raw %>% select("DIS_SAND_sc","ICELAST09_sc","BOTTOMCOV"),
y = data_raw$WHIBIN
)
initial_values <- list(
init1 = list(alpha=0, beta1=5,beta2=10,beta3=-10),
init1 = list(alpha=5, beta1=0,beta2=5,beta3=0),
init1 = list(alpha=-5,beta1=5,beta2=10,beta3=5),
init1 = list(alpha=10,beta1=-10,beta2=5,beta3=-5)
)
posterior <- stan(
model_code = stanModel_whitefish,
data       = data_stan,
warmup     = 500,
iter       = 2000,
chains     = 4,
h_year = 1612
d_year = 52*5 - 7
d_work_year = h_year/7.25
d_free_year = d_year-d_work_year
d_free_used <-
4+ #jan +
5+ #sofie, tromsø + famtref¸
5+ #kberg
5+ #sommer
5+ #sommer
5+ #jul
-2 # jobb i påska
d_free_remain <- d_free_year - d_free_used
d_free_remain
h_year = 1612
d_year = 52*5 - 7
d_work_year = h_year/7.25
d_free_year = d_year-d_work_year
d_free_used <-
4+ #jan +
5+ #sofie, tromsø + famtref¸
5+ #kberg
5+ #sommer
5+ #sommer
5+ #jul
-2 # jobb i påska
d_free_remain <- d_free_year - d_free_used
d_free_remain
h_year = 1612
d_year = 52*5 - 1
d_work_year = h_year/7.25
d_free_year = d_year-d_work_year
d_free_used <-
4+ #jan +
5+ #sofie, tromsø + famtref¸
5+ #kberg
5+ #sommer
5+ #sommer
5+ #jul
-2 # jobb i påska
d_free_remain <- d_free_year - d_free_used
d_free_remain
h_year = 1612
d_year = 52*5 - 1 #(working on 6 of 7 public holidays)
d_work_year = h_year/7.25
d_free_year = d_year-d_work_year
d_free_used <-
4+ #jan +
5+ #sofie, tromsø + famtref¸
5+ #kberg
5+ #sommer
5+ #sommer
5+ #høst
5+ #jul
-2 # jobb i påska
d_free_remain <- d_free_year - d_free_used
d_free_remain
h_year = 1612
d_year = 52*5 - 1 #(working on 6 of 7 public holidays)
d_work_year = h_year/7.25
d_free_year = d_year-d_work_year
d_free_used <-
4+ #jan +
5+ #sofie, tromsø + famtref¸
5+ #kberg
5+ #sommer
5+ #sommer
5+ #høst
5+ #jul
d_free_remain <- d_free_year - d_free_used
d_free_remain
h_year = 1612
d_openforwork_year = 52*5 - 7 #(7 public holidays)
d_towork_year = h_year/7.25
d_free_year = d_openforwork_year - d_towork_year
d_free_used <-
4+ #jan +
5+ #sofie, tromsø + famtref¸
5+ #kberg
5+ #sommer
5+ #sommer
5+ #høst
5+ #jul
-6 # jobb på publ. holidays
d_free_remain <- d_free_year - d_free_used
d_free_remain
h_year = 1612
d_openforwork_year = 52*5 - 1 #( working on 6 out of 7 public holidays, so only subtract 1)
d_towork_year = h_year/7.25
d_free_year = d_openforwork_year - d_towork_year
d_free_used <-
4+ #jan +
5+ #sofie, tromsø + famtref¸
5+ #kberg
5+ #sommer
5+ #sommer
5+ #høst
5+ #jul
d_free_remain <- d_free_year - d_free_used
d_free_remain
library(tidyverse)
setwd("G:/.shortcut-targets-by-id/1DXAvQYtRSS3l3vODEIEnoYkFD4GfDr9k/Lammi salmon/Project Big Tanks/data - big tank genetic/data - genotypes offspring/call 220608")
read_delim("all_snps_20220608.snps")
read_delim("all_snps_20220608.snps") %>%
t()
read_delim("all_snps_20220608.snps") %>%
t() %>%
view()
read_delim("all_snps_20220608.snps") %>%
eiriktools::funkyTranspose()
setwd("C:/Users/asheimer/files/Jottacloud/github/eiriktools/R")
